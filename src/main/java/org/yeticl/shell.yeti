/*
 * Copyright 2011 Christian Essl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

module org.yeticl.shell;
import java.lang: System, Thread;
import java.io: OutputStreamWriter,File;
import java.util.Timer;






_findOneDir nameList = (
    fold do ret na:
            case ret of
                [] : (
                    fl = new File("\(na)");
                    if fl#exists() then
                        [fl]
                    else [] fi;
                );
                _ : ret;
            esac
        done [] nameList;
);


var _sourceDirs = map' string (list (wrapArray YetiShellUtils#getShellSourceDirs()));



shellEvaluator = YetiShellUtils#getShellEvaluator();
_output str = print str;
cprint str = (_output (str ^ "\nyeti>"); ());
sprint str = _output str;


var monitors is list<{id is number, var active is boolean, name is string, monitor is () -> ()}> = [];
var monitorId = 0;

timer = new Timer();

checkChanged dirs lastupdate is list<~File> -> number -> number= (
    ff update file is number -> ~File -> number = (
        nupdate = max file#lastModified() update;
        if file#isDirectory() then
            checkChanged (list (wrapArray file#listFiles())) nupdate
        else
            nupdate
        fi
    );
    fold ff lastupdate dirs;
);


(
    class MyTimerTask() extends YTimerTask()
        var dirs = map' do d: new File(string d) done _sourceDirs,
        var lastUpdate = checkChanged dirs 0,
        void run() (
            dirs := map' do d: new File(string d) done (_sourceDirs);
            nlu = checkChanged dirs lastUpdate;
            if nlu > lastUpdate then
                lastUpdate := nlu;
                ae = synchronized timer \monitors;
                if not empty? ae then
                    s = cprint "monitor: " ^ (_sourceDirs);
                    for ae do a:
                        if synchronized timer \(a.active) then
                            a.monitor()
                        fi
                    done;
                fi;
            fi;
        )
    end;

    timer#scheduleAtFixedRate(new MyTimerTask(),1000,1000);
    ()
);


newEvaluator sourceFiles is list<string> -> ~YetiEvaluator = (
    sds = new FileSourceReader(array sourceFiles);
    newCl = new YetiClassLoader(shellEvaluator#getYetiClassLoader()#getParent(),sds);
    new YetiEvaluator(newCl);
);



{

    set sourceDirs o = _sourceDirs := o;,
    get sourceDirs () = _sourceDirs,


    setSourceDirsOf listOfList is list<list<string>> -> () = (
        fls = concatMap do dirs: _findOneDir dirs done listOfList;
        _sourceDirs := map' string fls;
        ();
    ),


    cprint,
    sprint,

    addMonitor name monitor = synchronized timer \(
        monitorId := monitorId + 1;
        monitors := {id = monitorId, var active = true, name, monitor} :: monitors;
        cprint "added monitor \(monitorId): \(name): \(monitor)";
    ),

    removeMonitor id = synchronized timer \(
        monitors := filter do el: el.id != id done monitors;
        cprint "removed monitor \(id)";
    ),

    activateMonitor id active = synchronized timer \(
        for monitors do mon:
            if mon.id == id then
                mon.active := active;
            fi;
        done;
    ),

    showMonitors () = synchronized timer \(
        sprint "monitors: \n";
        for monitors do el:
            sprint "\(el.id): \(el.active): \(el.name): \(el.monitor)\n";
        done;
        cprint "";
    ),

    shellEvaluator,

    var replEvaluator is ~YetiEvaluator = newEvaluator (_sourceDirs),

    var refreshCode = "",

    refresh () = (
        replEvaluator := newEvaluator (_sourceDirs);
        if (strLength refreshCode) > 0 then
            cprint replEvaluator#eval(refreshCode)
        fi;
        cprint "repl refreshed"
    ),

    brancheWithDirs srcDirs  code = (
        testEvaluator = newEvaluator srcDirs;
        cprint ("-----------------------\nbranche start: " ^ code);
        if (strLength code) > 0 then
            sprint (code ^ "\n");
            res = testEvaluator#eval(code);
            sprint (res ^ "\n");
        fi;
        cprint ("branche end: " ^ code ^ "\n------------------------");
    ),

    branche code = brancheWithDirs (_sourceDirs) code,

    /*
    checkSpec moduleName is string -> ()=
        branche "(load org.yeb.yebspec).printResult print ((load \(moduleName)) none)",
    */

    _start _ = (
        x = refresh ();

        cprint "\nReady to take your commands :)";
        lineReader =
            if YetiShellUtils#USE_JLINE then
                cReader = new jline.ConsoleReader(System#in, new OutputStreamWriter(System#out));
                \(string cReader#readLine(">"))
            else
                stdin.readln;
            fi;


        var continue = true;
        var ret = "quit";

        continue loop (

            line = lineReader ();
            if line == "--quit" then
                continue := false;
                ret := "quit";
                sprint "\nQuitting shell. By By!\n";
            elif line == "--restart" then
                continue := false;
                ret := "restart";
                sprint "\nRestarting shell. See you soon :)\n";
            elif line == "--help" or line == "-h" or line == "-help" then
                cprint "--restart : reloads the shell\n--quit : to stop the shell\n--help : this message \n-yeti expr : execute yeti expr in shell\n-s : shell commands struct \nyeti expr : execute yeti expr in repl";
            elif strStarts? line "-" then
                nline = strRight line 1;
                sprint "\nshell:";
                cprint shellEvaluator#eval(nline);
            else
                cprint replEvaluator#eval(line);
            fi;
        );
        ret
    ),
}